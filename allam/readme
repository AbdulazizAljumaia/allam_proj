Here's a comprehensive documentation for your PHP code:

---

# Documentation for PHP Script: Virtual Intelligent Voice Interactive Framework (VIVIF)

This PHP script provides a virtual assistant framework, leveraging multiple APIs like Pinecone, OpenAI, and IBM Watsonx for natural language processing, voice synthesis, and real-time interactions with users. This documentation covers its functionality, configurations, and API integrations.

---

## Configuration and Setup

1. **Error Display**  
   ```
   ini_set('display_errors', 1);
   error_reporting(E_ALL);
   ```
   Enables error display for debugging purposes.

2. **Dependencies**  
   ```
   require 'vendor/autoload.php';
   ```
   Requires Composer dependencies for API integration.

3. **Session Handling**  
   ```
   if (session_status() === PHP_SESSION_NONE) { session_start(); }
   ```
   Starts a session if not already initiated.

4. **OS-Based Inclusion**  
   Includes different files based on the operating system:
   ```
   include $_SERVER['DOCUMENT_ROOT'] . '/usr/Sher/shera.php';
   ```

5. **API Keys**  
   Define keys for accessing Pinecone and other APIs.

---

## Primary Functions

### 1. `search_similar_items()`
   - Purpose: Searches Pinecone for similar items based on the input text.
   - Steps:
     1. Generate text embeddings.
     2. Query Pinecone with embeddings to find top matches.
   - Returns: Text context from matched items in Pinecone.

### 2. `check_conflict_with_rag()`
   - Purpose: Checks for conflict between user input and regulatory guidelines.
   - Steps:
     1. Uses OpenAI to analyze if the text conflicts with RAG context.
   - Returns: Boolean result indicating conflict.

### 3. `generateAllamResponse()`
   - Purpose: Generates responses using IBM Watsonx Allam API.
   - Returns: Textual response from IBM Watsonx.

### 4. `generateOpenAiResponse()`
   - Purpose: Generates responses using OpenAI's ChatGPT (GPT-3.5).
   - Returns: Text response generated by OpenAI.

### 5. `TranslateOpenAiResponse()`
   - Purpose: Translates and simplifies responses using OpenAI.
   - Returns: Arabic translation of selected English words.

### 6. `play_text_as_sound()`
   - Purpose: Converts text to audio using ElevenLabs API.
   - Steps:
     1. Finds or creates a folder for recordings.
     2. Writes audio output to a file.
   - Returns: Path to the saved audio file.

### 7. `transcribeAudio()`
   - Purpose: Converts audio to text using OpenAI Whisper.
   - Returns: Transcribed text from audio input.

### 8. `randimreplyid()`
   - Purpose: Generates a random reply ID string.
   - Returns: Random alphanumeric string.

### 9. `getCurrentSaudiTime()`
   - Purpose: Returns the current date and time in Saudi Arabia.
   - Returns: String formatted as `Y-m-d H:i:s`.

---

## Workflow and Main Logic

1. **Session Validation**  
   Verifies if session variables `phone` and `password` exist. If valid, retrieves user records from the database.

2. **Avatar Retrieval**  
   Fetches user avatar, username, expiration date, and usage counts.

3. **Voice and Translation Options**  
   Uses `accent_gender` and `translationStatus` to determine:
   - The voice avatar and character for the response.
   - If translation is required.

4. **Audio Processing and Transcription**  
   - Uploads and processes the user's audio.
   - Transcribes audio using `transcribeAudio()` and retrieves contextual text from Pinecone.

5. **Conflict Detection**  
   - Verifies if the userâ€™s query conflicts with RAG guidelines.
   - Provides conflict feedback if necessary.

6. **Generating Response**  
   - If no conflict, generates a response with IBM Watsonx or OpenAI and converts it to audio.
   - Optionally translates the response if `translationStatus` is `on`.

7. **Database Interaction**  
   - Stores interaction history in the database.
   - Updates usage count based on translation status.

8. **Output Display**  
   - Displays chat-style response, including text, avatar, and audio playback.

---

## Error Handling and Logging

- Uses `error_log` to record errors at various stages:
  - API response status and unexpected responses.
  - File and directory issues during audio processing.
  - Database-related errors during session and chat history management.

---

### Notes

- **Security:** Ensure sensitive data like API keys and database credentials are secured, avoiding hardcoding them in the code.
- **Error Handling:** Further improve error handling for better user experience and troubleshooting.
- **API Limits:** Monitor API usage and apply caching strategies to optimize performance.

---

This concludes the documentation for the VIVIF framework, providing a detailed guide for setup, API integration, workflow, and error handling.
